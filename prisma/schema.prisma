datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String              @id @default(auto()) @map("_id") @db.ObjectId
  name                String?
  email               String?             @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  personalityProfile  PersonalityProfile?
  sentConnections     TwinConnection[]    @relation("sentConnections")
  receivedConnections TwinConnection[]    @relation("receivedConnections")
  messages            Message[]
  messageReactions    MessageReaction[]
  autopilotSessions   AutopilotSession[]
  autopilotActivities AutopilotActivity[] @relation("UserActivities")
  achievements        Achievement[]
  rewards             Reward[]
  streaks             Streak[]
  settings            AutopilotSettings?
  memories            Memory[]            @relation("UserMemories")
  interactions        Interaction[]       @relation("UserInteractions")
  learningPoints      LearningPoint[]     @relation("UserLearningPoints")
  voiceChats          VoiceChat[]         @relation("UserVoiceChats")
  videoChats          VideoChat[]         @relation("UserVideoChats")
  alternateTimelines  AlternateTimeline[] @relation("UserAlternateTimelines")
  chats               Chat[]              @relation("ChatParticipants", fields: [chatIds], references: [id])
  chatIds             String[]            @db.ObjectId
  posts               Post[]
  comments            Comment[]
  socialConnections   SocialConnection[]
}

model PersonalityProfile {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique @db.ObjectId
  traits      Json?
  interests   String[]
  focusAreas  String[] @default(["skills", "interests", "goals"])
  activeHours Json?
  blacklist   String[] @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  type      String
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  metadata  Json?

  @@index([userId])
}

model TwinConnection {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  targetUserId String   @db.ObjectId
  status       String   @default("PENDING")
  quality      Float?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  sender       User     @relation("sentConnections", fields: [userId], references: [id], onDelete: Cascade)
  receiver     User     @relation("receivedConnections", fields: [targetUserId], references: [id], onDelete: Cascade)

  @@unique([userId, targetUserId])
}

model Chat {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userIds   String[]  @db.ObjectId
  users     User[]    @relation("ChatParticipants", fields: [userIds], references: [id])
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  settings  Json?
}

model Message {
  id          String              @id @default(auto()) @map("_id") @db.ObjectId
  chatId      String              @db.ObjectId
  userId      String              @db.ObjectId
  content     String
  reactions   MessageReaction[]
  attachments MessageAttachment[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  chat        Chat                @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MessageReaction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  messageId String   @db.ObjectId
  userId    String   @db.ObjectId
  emoji     String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
}

model MessageAttachment {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  messageId String  @db.ObjectId
  type      String
  url       String
  metadata  Json?
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model Memory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  type       String
  content    String
  importance Float
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation("UserMemories", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Interaction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  targetId  String   @db.ObjectId
  type      String
  content   String?
  sentiment Float?
  metadata  Json?
  createdAt DateTime @default(now())
  user      User     @relation("UserInteractions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([targetId])
}

model LearningPoint {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  trait     String
  value     Float
  source    String
  metadata  Json?
  createdAt DateTime @default(now())
  user      User     @relation("UserLearningPoints", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VoiceChat {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  targetId  String   @db.ObjectId
  duration  Int
  quality   Float?
  recording String?
  metadata  Json?
  createdAt DateTime @default(now())
  user      User     @relation("UserVoiceChats", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VideoChat {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  targetId  String   @db.ObjectId
  duration  Int
  quality   Float?
  recording String?
  metadata  Json?
  createdAt DateTime @default(now())
  user      User     @relation("UserVideoChats", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AlternateTimeline {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  title       String
  description String
  variables   Json
  impact      Float
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("UserAlternateTimelines", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AutopilotSession {
  id          String              @id @default(auto()) @map("_id") @db.ObjectId
  userId      String              @db.ObjectId
  status      String              @default("ACTIVE")
  startedAt   DateTime            @default(now())
  completedAt DateTime?
  metadata    Json?
  activities  AutopilotActivity[]
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AutopilotActivity {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  sessionId String           @db.ObjectId
  userId    String           @db.ObjectId
  type      String
  status    String
  metadata  Json?
  createdAt DateTime         @default(now())
  session   AutopilotSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user      User             @relation("UserActivities", fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([userId])
}

model Achievement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  type        String
  title       String
  description String
  unlockedAt  DateTime @default(now())
  metadata    Json?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@index([userId])
}

model Reward {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  type        String
  title       String
  description String
  value       Int
  claimed     Boolean   @default(false)
  expiresAt   DateTime?
  claimedAt   DateTime?
  metadata    Json?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Streak {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  type       String
  count      Int      @default(1)
  lastActive DateTime @default(now())
  metadata   Json?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@index([userId])
}

model AutopilotSettings {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique @db.ObjectId
  activeHours Json?
  preferences Json?
  blacklist   String[] @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  content   String
  likes     Int       @default(0)
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  userId    String   @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
}

model SocialConnection {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  provider  String   // 'twitter' or 'linkedin'
  providerId String  // The user's ID on the provider platform
  accessToken String
  refreshToken String?
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@index([userId])
}
